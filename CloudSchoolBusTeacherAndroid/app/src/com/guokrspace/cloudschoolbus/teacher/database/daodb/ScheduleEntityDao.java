package com.guokrspace.cloudschoolbus.teacher.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table SCHEDULE_ENTITY.
*/
public class ScheduleEntityDao extends AbstractDao<ScheduleEntity, Void> {

    public static final String TABLENAME = "SCHEDULE_ENTITY";

    /**
     * Properties of entity ScheduleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Starthour = new Property(0, Integer.class, "starthour", false, "STARTHOUR");
        public final static Property Startmin = new Property(1, Integer.class, "startmin", false, "STARTMIN");
        public final static Property Endhour = new Property(2, Integer.class, "endhour", false, "ENDHOUR");
        public final static Property Endmin = new Property(3, Integer.class, "endmin", false, "ENDMIN");
        public final static Property Cnname = new Property(4, String.class, "cnname", false, "CNNAME");
        public final static Property Enname = new Property(5, String.class, "enname", false, "ENNAME");
        public final static Property Week = new Property(6, Integer.class, "week", false, "WEEK");
        public final static Property Year = new Property(7, Integer.class, "year", false, "YEAR");
    };


    public ScheduleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ScheduleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SCHEDULE_ENTITY' (" + //
                "'STARTHOUR' INTEGER," + // 0: starthour
                "'STARTMIN' INTEGER," + // 1: startmin
                "'ENDHOUR' INTEGER," + // 2: endhour
                "'ENDMIN' INTEGER," + // 3: endmin
                "'CNNAME' TEXT," + // 4: cnname
                "'ENNAME' TEXT," + // 5: enname
                "'WEEK' INTEGER," + // 6: week
                "'YEAR' INTEGER);"); // 7: year
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SCHEDULE_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ScheduleEntity entity) {
        stmt.clearBindings();
 
        Integer starthour = entity.getStarthour();
        if (starthour != null) {
            stmt.bindLong(1, starthour);
        }
 
        Integer startmin = entity.getStartmin();
        if (startmin != null) {
            stmt.bindLong(2, startmin);
        }
 
        Integer endhour = entity.getEndhour();
        if (endhour != null) {
            stmt.bindLong(3, endhour);
        }
 
        Integer endmin = entity.getEndmin();
        if (endmin != null) {
            stmt.bindLong(4, endmin);
        }
 
        String cnname = entity.getCnname();
        if (cnname != null) {
            stmt.bindString(5, cnname);
        }
 
        String enname = entity.getEnname();
        if (enname != null) {
            stmt.bindString(6, enname);
        }
 
        Integer week = entity.getWeek();
        if (week != null) {
            stmt.bindLong(7, week);
        }
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(8, year);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ScheduleEntity readEntity(Cursor cursor, int offset) {
        ScheduleEntity entity = new ScheduleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // starthour
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // startmin
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // endhour
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // endmin
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cnname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // enname
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // week
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // year
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ScheduleEntity entity, int offset) {
        entity.setStarthour(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setStartmin(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setEndhour(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEndmin(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCnname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeek(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setYear(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ScheduleEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ScheduleEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
