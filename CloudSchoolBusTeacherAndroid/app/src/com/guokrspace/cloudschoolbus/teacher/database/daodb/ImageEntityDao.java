package com.guokrspace.cloudschoolbus.teacher.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table IMAGE_ENTITY.
*/
public class ImageEntityDao extends AbstractDao<ImageEntity, String> {

    public static final String TABLENAME = "IMAGE_ENTITY";

    /**
     * Properties of entity ImageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Filename = new Property(0, String.class, "filename", true, "FILENAME");
        public final static Property Source = new Property(1, String.class, "source", false, "SOURCE");
        public final static Property Fext = new Property(2, String.class, "fext", false, "FEXT");
        public final static Property Size = new Property(3, String.class, "size", false, "SIZE");
        public final static Property IsCloud = new Property(4, String.class, "isCloud", false, "IS_CLOUD");
        public final static Property ArticleId = new Property(5, String.class, "articleId", false, "ARTICLE_ID");
    };

    private DaoSession daoSession;

    private Query<ImageEntity> articleEntity_ImagesQuery;

    public ImageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ImageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IMAGE_ENTITY' (" + //
                "'FILENAME' TEXT PRIMARY KEY NOT NULL ," + // 0: filename
                "'SOURCE' TEXT," + // 1: source
                "'FEXT' TEXT," + // 2: fext
                "'SIZE' TEXT," + // 3: size
                "'IS_CLOUD' TEXT," + // 4: isCloud
                "'ARTICLE_ID' TEXT NOT NULL );"); // 5: articleId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IMAGE_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImageEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFilename());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(2, source);
        }
 
        String fext = entity.getFext();
        if (fext != null) {
            stmt.bindString(3, fext);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(4, size);
        }
 
        String isCloud = entity.getIsCloud();
        if (isCloud != null) {
            stmt.bindString(5, isCloud);
        }
        stmt.bindString(6, entity.getArticleId());
    }

    @Override
    protected void attachEntity(ImageEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ImageEntity readEntity(Cursor cursor, int offset) {
        ImageEntity entity = new ImageEntity( //
            cursor.getString(offset + 0), // filename
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // source
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fext
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // size
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // isCloud
            cursor.getString(offset + 5) // articleId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImageEntity entity, int offset) {
        entity.setFilename(cursor.getString(offset + 0));
        entity.setSource(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFext(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSize(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsCloud(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setArticleId(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ImageEntity entity, long rowId) {
        return entity.getFilename();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ImageEntity entity) {
        if(entity != null) {
            return entity.getFilename();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "images" to-many relationship of ArticleEntity. */
    public List<ImageEntity> _queryArticleEntity_Images(String articleId) {
        synchronized (this) {
            if (articleEntity_ImagesQuery == null) {
                QueryBuilder<ImageEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ArticleId.eq(null));
                articleEntity_ImagesQuery = queryBuilder.build();
            }
        }
        Query<ImageEntity> query = articleEntity_ImagesQuery.forCurrentThread();
        query.setParameter(0, articleId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getArticleEntityDao().getAllColumns());
            builder.append(" FROM IMAGE_ENTITY T");
            builder.append(" LEFT JOIN ARTICLE_ENTITY T0 ON T.'ARTICLE_ID'=T0.'ARTICLEKEY'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ImageEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        ImageEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ArticleEntity articleEntity = loadCurrentOther(daoSession.getArticleEntityDao(), cursor, offset);
         if(articleEntity != null) {
            entity.setArticleEntity(articleEntity);
        }

        return entity;    
    }

    public ImageEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ImageEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ImageEntity> list = new ArrayList<ImageEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ImageEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ImageEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
