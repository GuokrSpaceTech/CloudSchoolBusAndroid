package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table ATTENDANCE_ENTITY.
*/
public class AttendanceEntityDao extends AbstractDao<AttendanceEntity, String> {

    public static final String TABLENAME = "ATTENDANCE_ENTITY";

    /**
     * Properties of entity AttendanceEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Month = new Property(0, String.class, "month", false, "MONTH");
        public final static Property Day = new Property(1, String.class, "day", false, "DAY");
        public final static Property Timestamp = new Property(2, String.class, "timestamp", true, "TIMESTAMP");
        public final static Property ImageUrl = new Property(3, String.class, "imageUrl", false, "IMAGE_URL");
    };


    public AttendanceEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ATTENDANCE_ENTITY' (" + //
                "'MONTH' TEXT," + // 0: month
                "'DAY' TEXT," + // 1: day
                "'TIMESTAMP' TEXT PRIMARY KEY NOT NULL ," + // 2: timestamp
                "'IMAGE_URL' TEXT);"); // 3: imageUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ATTENDANCE_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AttendanceEntity entity) {
        stmt.clearBindings();
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(1, month);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(2, day);
        }
        stmt.bindString(3, entity.getTimestamp());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 2);
    }    

    /** @inheritdoc */
    @Override
    public AttendanceEntity readEntity(Cursor cursor, int offset) {
        AttendanceEntity entity = new AttendanceEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // month
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // day
            cursor.getString(offset + 2), // timestamp
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // imageUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AttendanceEntity entity, int offset) {
        entity.setMonth(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDay(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimestamp(cursor.getString(offset + 2));
        entity.setImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AttendanceEntity entity, long rowId) {
        return entity.getTimestamp();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AttendanceEntity entity) {
        if(entity != null) {
            return entity.getTimestamp();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
