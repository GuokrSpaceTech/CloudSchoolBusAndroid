package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table LAST_LETTER_ENTITY.
*/
public class LastLetterEntityDao extends AbstractDao<LastLetterEntity, Void> {

    public static final String TABLENAME = "LAST_LETTER_ENTITY";

    /**
     * Properties of entity LastLetterEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Teacherid = new Property(0, String.class, "teacherid", false, "TEACHERID");
        public final static Property Lastchat = new Property(1, String.class, "lastchat", false, "LASTCHAT");
        public final static Property Picture = new Property(2, String.class, "picture", false, "PICTURE");
    };


    public LastLetterEntityDao(DaoConfig config) {
        super(config);
    }
    
    public LastLetterEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LAST_LETTER_ENTITY' (" + //
                "'TEACHERID' TEXT," + // 0: teacherid
                "'LASTCHAT' TEXT," + // 1: lastchat
                "'PICTURE' TEXT);"); // 2: picture
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LAST_LETTER_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LastLetterEntity entity) {
        stmt.clearBindings();
 
        String teacherid = entity.getTeacherid();
        if (teacherid != null) {
            stmt.bindString(1, teacherid);
        }
 
        String lastchat = entity.getLastchat();
        if (lastchat != null) {
            stmt.bindString(2, lastchat);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(3, picture);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public LastLetterEntity readEntity(Cursor cursor, int offset) {
        LastLetterEntity entity = new LastLetterEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // teacherid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lastchat
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // picture
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LastLetterEntity entity, int offset) {
        entity.setTeacherid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLastchat(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPicture(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(LastLetterEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(LastLetterEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
