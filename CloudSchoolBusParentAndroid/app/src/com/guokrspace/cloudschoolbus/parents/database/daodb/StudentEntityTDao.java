package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table STUDENT_ENTITY_T.
*/
public class StudentEntityTDao extends AbstractDao<StudentEntityT, String> {

    public static final String TABLENAME = "STUDENT_ENTITY_T";

    /**
     * Properties of entity StudentEntityT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Studentid = new Property(0, String.class, "studentid", true, "STUDENTID");
        public final static Property Nikename = new Property(1, String.class, "nikename", false, "NIKENAME");
        public final static Property Cnname = new Property(2, String.class, "cnname", false, "CNNAME");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
        public final static Property Pickey = new Property(6, String.class, "pickey", false, "PICKEY");
    };

    private Query<StudentEntityT> uploadArticleEntity_StudentEntityTListQuery;

    public StudentEntityTDao(DaoConfig config) {
        super(config);
    }
    
    public StudentEntityTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STUDENT_ENTITY_T' (" + //
                "'STUDENTID' TEXT PRIMARY KEY NOT NULL ," + // 0: studentid
                "'NIKENAME' TEXT," + // 1: nikename
                "'CNNAME' TEXT," + // 2: cnname
                "'SEX' TEXT," + // 3: sex
                "'BIRTHDAY' TEXT," + // 4: birthday
                "'AVATAR' TEXT," + // 5: avatar
                "'PICKEY' TEXT);"); // 6: pickey
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STUDENT_ENTITY_T'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StudentEntityT entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getStudentid());
 
        String nikename = entity.getNikename();
        if (nikename != null) {
            stmt.bindString(2, nikename);
        }
 
        String cnname = entity.getCnname();
        if (cnname != null) {
            stmt.bindString(3, cnname);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
 
        String pickey = entity.getPickey();
        if (pickey != null) {
            stmt.bindString(7, pickey);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StudentEntityT readEntity(Cursor cursor, int offset) {
        StudentEntityT entity = new StudentEntityT( //
            cursor.getString(offset + 0), // studentid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nikename
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cnname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // pickey
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StudentEntityT entity, int offset) {
        entity.setStudentid(cursor.getString(offset + 0));
        entity.setNikename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCnname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPickey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(StudentEntityT entity, long rowId) {
        return entity.getStudentid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(StudentEntityT entity) {
        if(entity != null) {
            return entity.getStudentid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "studentEntityTList" to-many relationship of UploadArticleEntity. */
    public List<StudentEntityT> _queryUploadArticleEntity_StudentEntityTList(String pickey) {
        synchronized (this) {
            if (uploadArticleEntity_StudentEntityTListQuery == null) {
                QueryBuilder<StudentEntityT> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Pickey.eq(null));
                uploadArticleEntity_StudentEntityTListQuery = queryBuilder.build();
            }
        }
        Query<StudentEntityT> query = uploadArticleEntity_StudentEntityTListQuery.forCurrentThread();
        query.setParameter(0, pickey);
        return query.list();
    }

}
