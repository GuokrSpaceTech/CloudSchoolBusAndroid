package com.guokrspace.cloudschoolbus.parents.database.daodb;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table CLASS_ENTITY_T.
 */
public class ClassEntityT {

    /** Not-null value. */
    private String classid;
    private String classname;
    private String remark;
    private String avatar;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ClassEntityTDao myDao;

    private List<StudentEntityT> studentEntityTList;
    private List<TeacherEntityT> teacherEntityTList;

    public ClassEntityT() {
    }

    public ClassEntityT(String classid) {
        this.classid = classid;
    }

    public ClassEntityT(String classid, String classname, String remark, String avatar) {
        this.classid = classid;
        this.classname = classname;
        this.remark = remark;
        this.avatar = avatar;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getClassEntityTDao() : null;
    }

    /** Not-null value. */
    public String getClassid() {
        return classid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setClassid(String classid) {
        this.classid = classid;
    }

    public String getClassname() {
        return classname;
    }

    public void setClassname(String classname) {
        this.classname = classname;
    }

    public String getRemark() {
        return remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StudentEntityT> getStudentEntityTList() {
        if (studentEntityTList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentEntityTDao targetDao = daoSession.getStudentEntityTDao();
            List<StudentEntityT> studentEntityTListNew = targetDao._queryClassEntityT_StudentEntityTList(classid);
            synchronized (this) {
                if(studentEntityTList == null) {
                    studentEntityTList = studentEntityTListNew;
                }
            }
        }
        return studentEntityTList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStudentEntityTList() {
        studentEntityTList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TeacherEntityT> getTeacherEntityTList() {
        if (teacherEntityTList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeacherEntityTDao targetDao = daoSession.getTeacherEntityTDao();
            List<TeacherEntityT> teacherEntityTListNew = targetDao._queryClassEntityT_TeacherEntityTList(classid);
            synchronized (this) {
                if(teacherEntityTList == null) {
                    teacherEntityTList = teacherEntityTListNew;
                }
            }
        }
        return teacherEntityTList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTeacherEntityTList() {
        teacherEntityTList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
