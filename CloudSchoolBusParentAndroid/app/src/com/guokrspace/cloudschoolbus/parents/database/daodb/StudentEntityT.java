package com.guokrspace.cloudschoolbus.parents.database.daodb;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table STUDENT_ENTITY_T.
 */
public class StudentEntityT {

    /** Not-null value. */
    private String studentid;
    private String nikename;
    private String cnname;
    private String sex;
    private String birthday;
    private String avatar;
    /** Not-null value. */
    private String classid;
    /** Not-null value. */
    private String parentid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StudentEntityTDao myDao;

    private List<ParentEntityT> parentEntityTList;
    private List<ClassEntityT> classEntityTList;

    public StudentEntityT() {
    }

    public StudentEntityT(String studentid) {
        this.studentid = studentid;
    }

    public StudentEntityT(String studentid, String nikename, String cnname, String sex, String birthday, String avatar, String classid, String parentid) {
        this.studentid = studentid;
        this.nikename = nikename;
        this.cnname = cnname;
        this.sex = sex;
        this.birthday = birthday;
        this.avatar = avatar;
        this.classid = classid;
        this.parentid = parentid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStudentEntityTDao() : null;
    }

    /** Not-null value. */
    public String getStudentid() {
        return studentid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStudentid(String studentid) {
        this.studentid = studentid;
    }

    public String getNikename() {
        return nikename;
    }

    public void setNikename(String nikename) {
        this.nikename = nikename;
    }

    public String getCnname() {
        return cnname;
    }

    public void setCnname(String cnname) {
        this.cnname = cnname;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getBirthday() {
        return birthday;
    }

    public void setBirthday(String birthday) {
        this.birthday = birthday;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    /** Not-null value. */
    public String getClassid() {
        return classid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setClassid(String classid) {
        this.classid = classid;
    }

    /** Not-null value. */
    public String getParentid() {
        return parentid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setParentid(String parentid) {
        this.parentid = parentid;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ParentEntityT> getParentEntityTList() {
        if (parentEntityTList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ParentEntityTDao targetDao = daoSession.getParentEntityTDao();
            List<ParentEntityT> parentEntityTListNew = targetDao._queryStudentEntityT_ParentEntityTList(studentid);
            synchronized (this) {
                if(parentEntityTList == null) {
                    parentEntityTList = parentEntityTListNew;
                }
            }
        }
        return parentEntityTList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetParentEntityTList() {
        parentEntityTList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ClassEntityT> getClassEntityTList() {
        if (classEntityTList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClassEntityTDao targetDao = daoSession.getClassEntityTDao();
            List<ClassEntityT> classEntityTListNew = targetDao._queryStudentEntityT_ClassEntityTList(studentid);
            synchronized (this) {
                if(classEntityTList == null) {
                    classEntityTList = classEntityTListNew;
                }
            }
        }
        return classEntityTList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetClassEntityTList() {
        classEntityTList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
