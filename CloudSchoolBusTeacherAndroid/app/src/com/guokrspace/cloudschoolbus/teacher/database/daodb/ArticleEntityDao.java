package com.guokrspace.cloudschoolbus.teacher.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table ARTICLE_ENTITY.
*/
public class ArticleEntityDao extends AbstractDao<ArticleEntity, String> {

    public static final String TABLENAME = "ARTICLE_ENTITY";

    /**
     * Properties of entity ArticleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Articlekey = new Property(0, String.class, "articlekey", true, "ARTICLEKEY");
        public final static Property Tag = new Property(1, String.class, "tag", false, "TAG");
        public final static Property Articleid = new Property(2, String.class, "articleid", false, "ARTICLEID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Publishtime = new Property(5, String.class, "publishtime", false, "PUBLISHTIME");
        public final static Property Addtime = new Property(6, String.class, "addtime", false, "ADDTIME");
        public final static Property Upnum = new Property(7, String.class, "upnum", false, "UPNUM");
        public final static Property Commentnum = new Property(8, String.class, "commentnum", false, "COMMENTNUM");
        public final static Property Havezan = new Property(9, String.class, "havezan", false, "HAVEZAN");
    };

    private DaoSession daoSession;


    public ArticleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICLE_ENTITY' (" + //
                "'ARTICLEKEY' TEXT PRIMARY KEY NOT NULL ," + // 0: articlekey
                "'TAG' TEXT," + // 1: tag
                "'ARTICLEID' TEXT," + // 2: articleid
                "'TITLE' TEXT," + // 3: title
                "'CONTENT' TEXT," + // 4: content
                "'PUBLISHTIME' TEXT," + // 5: publishtime
                "'ADDTIME' TEXT," + // 6: addtime
                "'UPNUM' TEXT," + // 7: upnum
                "'COMMENTNUM' TEXT," + // 8: commentnum
                "'HAVEZAN' TEXT);"); // 9: havezan
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICLE_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ArticleEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getArticlekey());
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(2, tag);
        }
 
        String articleid = entity.getArticleid();
        if (articleid != null) {
            stmt.bindString(3, articleid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String publishtime = entity.getPublishtime();
        if (publishtime != null) {
            stmt.bindString(6, publishtime);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(7, addtime);
        }
 
        String upnum = entity.getUpnum();
        if (upnum != null) {
            stmt.bindString(8, upnum);
        }
 
        String commentnum = entity.getCommentnum();
        if (commentnum != null) {
            stmt.bindString(9, commentnum);
        }
 
        String havezan = entity.getHavezan();
        if (havezan != null) {
            stmt.bindString(10, havezan);
        }
    }

    @Override
    protected void attachEntity(ArticleEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ArticleEntity readEntity(Cursor cursor, int offset) {
        ArticleEntity entity = new ArticleEntity( //
            cursor.getString(offset + 0), // articlekey
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // articleid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // publishtime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // addtime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // upnum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // commentnum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // havezan
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ArticleEntity entity, int offset) {
        entity.setArticlekey(cursor.getString(offset + 0));
        entity.setTag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArticleid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPublishtime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddtime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpnum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCommentnum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHavezan(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ArticleEntity entity, long rowId) {
        return entity.getArticlekey();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ArticleEntity entity) {
        if(entity != null) {
            return entity.getArticlekey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
