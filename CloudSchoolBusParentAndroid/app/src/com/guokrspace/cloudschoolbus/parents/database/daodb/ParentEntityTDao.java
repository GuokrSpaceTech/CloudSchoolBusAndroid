package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table PARENT_ENTITY_T.
*/
public class ParentEntityTDao extends AbstractDao<ParentEntityT, String> {

    public static final String TABLENAME = "PARENT_ENTITY_T";

    /**
     * Properties of entity ParentEntityT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Parentid = new Property(0, String.class, "parentid", true, "PARENTID");
        public final static Property Nikename = new Property(1, String.class, "nikename", false, "NIKENAME");
        public final static Property Relationship = new Property(2, String.class, "relationship", false, "RELATIONSHIP");
        public final static Property Mobile = new Property(3, String.class, "mobile", false, "MOBILE");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
    };

    private DaoSession daoSession;


    public ParentEntityTDao(DaoConfig config) {
        super(config);
    }
    
    public ParentEntityTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PARENT_ENTITY_T' (" + //
                "'PARENTID' TEXT PRIMARY KEY NOT NULL ," + // 0: parentid
                "'NIKENAME' TEXT," + // 1: nikename
                "'RELATIONSHIP' TEXT," + // 2: relationship
                "'MOBILE' TEXT," + // 3: mobile
                "'AVATAR' TEXT);"); // 4: avatar
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PARENT_ENTITY_T'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ParentEntityT entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getParentid());
 
        String nikename = entity.getNikename();
        if (nikename != null) {
            stmt.bindString(2, nikename);
        }
 
        String relationship = entity.getRelationship();
        if (relationship != null) {
            stmt.bindString(3, relationship);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
    }

    @Override
    protected void attachEntity(ParentEntityT entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ParentEntityT readEntity(Cursor cursor, int offset) {
        ParentEntityT entity = new ParentEntityT( //
            cursor.getString(offset + 0), // parentid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nikename
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // relationship
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // avatar
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ParentEntityT entity, int offset) {
        entity.setParentid(cursor.getString(offset + 0));
        entity.setNikename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRelationship(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ParentEntityT entity, long rowId) {
        return entity.getParentid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ParentEntityT entity) {
        if(entity != null) {
            return entity.getParentid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
