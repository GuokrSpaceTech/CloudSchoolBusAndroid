package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CLASS_ENTITY_T.
*/
public class ClassEntityTDao extends AbstractDao<ClassEntityT, String> {

    public static final String TABLENAME = "CLASS_ENTITY_T";

    /**
     * Properties of entity ClassEntityT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Classid = new Property(0, String.class, "classid", true, "CLASSID");
        public final static Property Classname = new Property(1, String.class, "classname", false, "CLASSNAME");
        public final static Property Remark = new Property(2, String.class, "remark", false, "REMARK");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
    };

    private DaoSession daoSession;

    private Query<ClassEntityT> studentEntityT_ClassEntityTListQuery;
    private Query<ClassEntityT> teacherEntityT_ClassEntityTListQuery;
    private Query<ClassEntityT> schoolEntityT_ClassEntityTListQuery;

    public ClassEntityTDao(DaoConfig config) {
        super(config);
    }
    
    public ClassEntityTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CLASS_ENTITY_T' (" + //
                "'CLASSID' TEXT PRIMARY KEY NOT NULL ," + // 0: classid
                "'CLASSNAME' TEXT," + // 1: classname
                "'REMARK' TEXT," + // 2: remark
                "'AVATAR' TEXT);"); // 3: avatar
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CLASS_ENTITY_T'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClassEntityT entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getClassid());
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(2, classname);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(3, remark);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
    }

    @Override
    protected void attachEntity(ClassEntityT entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ClassEntityT readEntity(Cursor cursor, int offset) {
        ClassEntityT entity = new ClassEntityT( //
            cursor.getString(offset + 0), // classid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // classname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // remark
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // avatar
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClassEntityT entity, int offset) {
        entity.setClassid(cursor.getString(offset + 0));
        entity.setClassname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRemark(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ClassEntityT entity, long rowId) {
        return entity.getClassid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ClassEntityT entity) {
        if(entity != null) {
            return entity.getClassid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "classEntityTList" to-many relationship of StudentEntityT. */
    public List<ClassEntityT> _queryStudentEntityT_ClassEntityTList(String classid) {
        synchronized (this) {
            if (studentEntityT_ClassEntityTListQuery == null) {
                QueryBuilder<ClassEntityT> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Classid.eq(null));
                studentEntityT_ClassEntityTListQuery = queryBuilder.build();
            }
        }
        Query<ClassEntityT> query = studentEntityT_ClassEntityTListQuery.forCurrentThread();
        query.setParameter(0, classid);
        return query.list();
    }

    /** Internal query to resolve the "classEntityTList" to-many relationship of TeacherEntityT. */
    public List<ClassEntityT> _queryTeacherEntityT_ClassEntityTList(String classid) {
        synchronized (this) {
            if (teacherEntityT_ClassEntityTListQuery == null) {
                QueryBuilder<ClassEntityT> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Classid.eq(null));
                teacherEntityT_ClassEntityTListQuery = queryBuilder.build();
            }
        }
        Query<ClassEntityT> query = teacherEntityT_ClassEntityTListQuery.forCurrentThread();
        query.setParameter(0, classid);
        return query.list();
    }

    /** Internal query to resolve the "classEntityTList" to-many relationship of SchoolEntityT. */
    public List<ClassEntityT> _querySchoolEntityT_ClassEntityTList(String classid) {
        synchronized (this) {
            if (schoolEntityT_ClassEntityTListQuery == null) {
                QueryBuilder<ClassEntityT> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Classid.eq(null));
                schoolEntityT_ClassEntityTListQuery = queryBuilder.build();
            }
        }
        Query<ClassEntityT> query = schoolEntityT_ClassEntityTListQuery.forCurrentThread();
        query.setParameter(0, classid);
        return query.list();
    }

}
