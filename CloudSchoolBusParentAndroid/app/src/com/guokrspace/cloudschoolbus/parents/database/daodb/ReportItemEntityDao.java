package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table REPORT_ITEM_ENTITY.
*/
public class ReportItemEntityDao extends AbstractDao<ReportItemEntity, Void> {

    public static final String TABLENAME = "REPORT_ITEM_ENTITY";

    /**
     * Properties of entity ReportItemEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property Answer = new Property(1, String.class, "answer", false, "ANSWER");
        public final static Property ReportId = new Property(2, String.class, "reportId", false, "REPORT_ID");
    };

    private Query<ReportItemEntity> reportEntity_ReportItemEntityListQuery;

    public ReportItemEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ReportItemEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REPORT_ITEM_ENTITY' (" + //
                "'TITLE' TEXT," + // 0: title
                "'ANSWER' TEXT," + // 1: answer
                "'REPORT_ID' TEXT NOT NULL );"); // 2: reportId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REPORT_ITEM_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReportItemEntity entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(2, answer);
        }
        stmt.bindString(3, entity.getReportId());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ReportItemEntity readEntity(Cursor cursor, int offset) {
        ReportItemEntity entity = new ReportItemEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // answer
            cursor.getString(offset + 2) // reportId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReportItemEntity entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAnswer(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReportId(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ReportItemEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ReportItemEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "reportItemEntityList" to-many relationship of ReportEntity. */
    public List<ReportItemEntity> _queryReportEntity_ReportItemEntityList(String reportId) {
        synchronized (this) {
            if (reportEntity_ReportItemEntityListQuery == null) {
                QueryBuilder<ReportItemEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ReportId.eq(null));
                reportEntity_ReportItemEntityListQuery = queryBuilder.build();
            }
        }
        Query<ReportItemEntity> query = reportEntity_ReportItemEntityListQuery.forCurrentThread();
        query.setParameter(0, reportId);
        return query.list();
    }

}
