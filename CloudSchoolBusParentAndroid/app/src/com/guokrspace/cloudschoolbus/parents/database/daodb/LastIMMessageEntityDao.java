package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table LAST_IMMESSAGE_ENTITY.
*/
public class LastIMMessageEntityDao extends AbstractDao<LastIMMessageEntity, String> {

    public static final String TABLENAME = "LAST_IMMESSAGE_ENTITY";

    /**
     * Properties of entity LastIMMessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Teacherid = new Property(0, String.class, "teacherid", true, "TEACHERID");
        public final static Property Timestamp = new Property(1, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property HasUnread = new Property(2, String.class, "hasUnread", false, "HAS_UNREAD");
    };

    private Query<LastIMMessageEntity> teacherEntity_LastIMMessageEntityListQuery;

    public LastIMMessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public LastIMMessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LAST_IMMESSAGE_ENTITY' (" + //
                "'TEACHERID' TEXT PRIMARY KEY NOT NULL ," + // 0: teacherid
                "'TIMESTAMP' TEXT," + // 1: timestamp
                "'HAS_UNREAD' TEXT);"); // 2: hasUnread
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LAST_IMMESSAGE_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LastIMMessageEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getTeacherid());
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(2, timestamp);
        }
 
        String hasUnread = entity.getHasUnread();
        if (hasUnread != null) {
            stmt.bindString(3, hasUnread);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LastIMMessageEntity readEntity(Cursor cursor, int offset) {
        LastIMMessageEntity entity = new LastIMMessageEntity( //
            cursor.getString(offset + 0), // teacherid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // timestamp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // hasUnread
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LastIMMessageEntity entity, int offset) {
        entity.setTeacherid(cursor.getString(offset + 0));
        entity.setTimestamp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHasUnread(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LastIMMessageEntity entity, long rowId) {
        return entity.getTeacherid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LastIMMessageEntity entity) {
        if(entity != null) {
            return entity.getTeacherid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "lastIMMessageEntityList" to-many relationship of TeacherEntity. */
    public List<LastIMMessageEntity> _queryTeacherEntity_LastIMMessageEntityList(String teacherid) {
        synchronized (this) {
            if (teacherEntity_LastIMMessageEntityListQuery == null) {
                QueryBuilder<LastIMMessageEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Teacherid.eq(null));
                teacherEntity_LastIMMessageEntityListQuery = queryBuilder.build();
            }
        }
        Query<LastIMMessageEntity> query = teacherEntity_LastIMMessageEntityListQuery.forCurrentThread();
        query.setParameter(0, teacherid);
        return query.list();
    }

}
