apply plugin: 'android'

dependencies {
    compile project(':pagerSlidingTabStrip')
    compile fileTree(dir: '../dependancies', include: ['*.jar'])
    compile fileTree(dir: './libs', include: ['*.jar'])
    compile project(':AndroidSupport')
    //    compile 'com.avast.android-styled-dialogs:2.2.0'
    compile project(':android-styled-dialogs')
    compile project(':dynamicgrid')
    compile 'com.loopj.android:android-async-http:1.4.5'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.4'
    compile 'de.greenrobot:greendao:1.3.7'
    compile 'de.greenrobot:greendao-generator:1.3.1'
//    compile 'com.github.alamkanak:android-week-view:1.2.3'
    compile 'com.squareup:otto:+'
    compile project(':materialList')
    compile project(':android-week-view')
}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)

        versionName project.SAMPLE_VERSION_NAME
        versionCode Integer.parseInt(project.SAMPLE_VERSION_CODE)
    }

    signingConfigs { release }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            jniLibs.srcDirs = ['jniLibs']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}

android {
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}