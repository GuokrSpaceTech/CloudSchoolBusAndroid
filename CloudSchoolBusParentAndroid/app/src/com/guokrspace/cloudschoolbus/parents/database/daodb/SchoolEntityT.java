package com.guokrspace.cloudschoolbus.parents.database.daodb;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table SCHOOL_ENTITY_T.
 */
public class SchoolEntityT {

    /** Not-null value. */
    private String id;
    private String groupid;
    private String name;
    private String remark;
    private String address;
    private String logo;
    private String cover;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SchoolEntityTDao myDao;

    private List<ClassEntityT> classEntityTList;
    private List<TagsEntityT> tagsEntityTList;
    private List<MessageTypeEntity> messageTypeEntityList;
    private List<ClassModuleEntity> classModuleEntityList;
    private List<TeacherDutyEntity> teacherDutyEntityList;
    private List<TeacherEntityT> teacherEntityTList;

    public SchoolEntityT() {
    }

    public SchoolEntityT(String id) {
        this.id = id;
    }

    public SchoolEntityT(String id, String groupid, String name, String remark, String address, String logo, String cover) {
        this.id = id;
        this.groupid = groupid;
        this.name = name;
        this.remark = remark;
        this.address = address;
        this.logo = logo;
        this.cover = cover;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSchoolEntityTDao() : null;
    }

    /** Not-null value. */
    public String getId() {
        return id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setId(String id) {
        this.id = id;
    }

    public String getGroupid() {
        return groupid;
    }

    public void setGroupid(String groupid) {
        this.groupid = groupid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getRemark() {
        return remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getLogo() {
        return logo;
    }

    public void setLogo(String logo) {
        this.logo = logo;
    }

    public String getCover() {
        return cover;
    }

    public void setCover(String cover) {
        this.cover = cover;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ClassEntityT> getClassEntityTList() {
        if (classEntityTList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClassEntityTDao targetDao = daoSession.getClassEntityTDao();
            List<ClassEntityT> classEntityTListNew = targetDao._querySchoolEntityT_ClassEntityTList(id);
            synchronized (this) {
                if(classEntityTList == null) {
                    classEntityTList = classEntityTListNew;
                }
            }
        }
        return classEntityTList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetClassEntityTList() {
        classEntityTList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TagsEntityT> getTagsEntityTList() {
        if (tagsEntityTList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TagsEntityTDao targetDao = daoSession.getTagsEntityTDao();
            List<TagsEntityT> tagsEntityTListNew = targetDao._querySchoolEntityT_TagsEntityTList(id);
            synchronized (this) {
                if(tagsEntityTList == null) {
                    tagsEntityTList = tagsEntityTListNew;
                }
            }
        }
        return tagsEntityTList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTagsEntityTList() {
        tagsEntityTList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MessageTypeEntity> getMessageTypeEntityList() {
        if (messageTypeEntityList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageTypeEntityDao targetDao = daoSession.getMessageTypeEntityDao();
            List<MessageTypeEntity> messageTypeEntityListNew = targetDao._querySchoolEntityT_MessageTypeEntityList(id);
            synchronized (this) {
                if(messageTypeEntityList == null) {
                    messageTypeEntityList = messageTypeEntityListNew;
                }
            }
        }
        return messageTypeEntityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMessageTypeEntityList() {
        messageTypeEntityList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ClassModuleEntity> getClassModuleEntityList() {
        if (classModuleEntityList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClassModuleEntityDao targetDao = daoSession.getClassModuleEntityDao();
            List<ClassModuleEntity> classModuleEntityListNew = targetDao._querySchoolEntityT_ClassModuleEntityList(id);
            synchronized (this) {
                if(classModuleEntityList == null) {
                    classModuleEntityList = classModuleEntityListNew;
                }
            }
        }
        return classModuleEntityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetClassModuleEntityList() {
        classModuleEntityList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TeacherDutyEntity> getTeacherDutyEntityList() {
        if (teacherDutyEntityList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeacherDutyEntityDao targetDao = daoSession.getTeacherDutyEntityDao();
            List<TeacherDutyEntity> teacherDutyEntityListNew = targetDao._querySchoolEntityT_TeacherDutyEntityList(id);
            synchronized (this) {
                if(teacherDutyEntityList == null) {
                    teacherDutyEntityList = teacherDutyEntityListNew;
                }
            }
        }
        return teacherDutyEntityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTeacherDutyEntityList() {
        teacherDutyEntityList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TeacherEntityT> getTeacherEntityTList() {
        if (teacherEntityTList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeacherEntityTDao targetDao = daoSession.getTeacherEntityTDao();
            List<TeacherEntityT> teacherEntityTListNew = targetDao._querySchoolEntityT_TeacherEntityTList(id);
            synchronized (this) {
                if(teacherEntityTList == null) {
                    teacherEntityTList = teacherEntityTListNew;
                }
            }
        }
        return teacherEntityTList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTeacherEntityTList() {
        teacherEntityTList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
