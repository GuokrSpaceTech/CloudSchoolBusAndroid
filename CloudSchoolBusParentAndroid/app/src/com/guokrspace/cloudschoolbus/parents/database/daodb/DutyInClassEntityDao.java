package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DUTY_IN_CLASS_ENTITY.
*/
public class DutyInClassEntityDao extends AbstractDao<DutyInClassEntity, Void> {

    public static final String TABLENAME = "DUTY_IN_CLASS_ENTITY";

    /**
     * Properties of entity DutyInClassEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Classid = new Property(0, String.class, "classid", false, "CLASSID");
        public final static Property Dutyid = new Property(1, String.class, "dutyid", false, "DUTYID");
        public final static Property Duty = new Property(2, String.class, "duty", false, "DUTY");
    };


    public DutyInClassEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DutyInClassEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DUTY_IN_CLASS_ENTITY' (" + //
                "'CLASSID' TEXT," + // 0: classid
                "'DUTYID' TEXT," + // 1: dutyid
                "'DUTY' TEXT);"); // 2: duty
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DUTY_IN_CLASS_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DutyInClassEntity entity) {
        stmt.clearBindings();
 
        String classid = entity.getClassid();
        if (classid != null) {
            stmt.bindString(1, classid);
        }
 
        String dutyid = entity.getDutyid();
        if (dutyid != null) {
            stmt.bindString(2, dutyid);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(3, duty);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public DutyInClassEntity readEntity(Cursor cursor, int offset) {
        DutyInClassEntity entity = new DutyInClassEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // classid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dutyid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // duty
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DutyInClassEntity entity, int offset) {
        entity.setClassid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDutyid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDuty(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(DutyInClassEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(DutyInClassEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
