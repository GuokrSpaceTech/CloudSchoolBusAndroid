package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table NOTICE_ENTITY.
*/
public class NoticeEntityDao extends AbstractDao<NoticeEntity, String> {

    public static final String TABLENAME = "NOTICE_ENTITY";

    /**
     * Properties of entity NoticeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Noticekey = new Property(0, String.class, "noticekey", true, "NOTICEKEY");
        public final static Property Noticeid = new Property(1, String.class, "noticeid", false, "NOTICEID");
        public final static Property Noticetitle = new Property(2, String.class, "noticetitle", false, "NOTICETITLE");
        public final static Property Noticecontent = new Property(3, String.class, "noticecontent", false, "NOTICECONTENT");
        public final static Property Addtime = new Property(4, String.class, "addtime", false, "ADDTIME");
        public final static Property Isteacher = new Property(5, String.class, "isteacher", false, "ISTEACHER");
        public final static Property Isconfirm = new Property(6, String.class, "isconfirm", false, "ISCONFIRM");
        public final static Property Haveisconfirm = new Property(7, String.class, "haveisconfirm", false, "HAVEISCONFIRM");
    };

    private DaoSession daoSession;


    public NoticeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public NoticeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTICE_ENTITY' (" + //
                "'NOTICEKEY' TEXT PRIMARY KEY NOT NULL ," + // 0: noticekey
                "'NOTICEID' TEXT," + // 1: noticeid
                "'NOTICETITLE' TEXT," + // 2: noticetitle
                "'NOTICECONTENT' TEXT," + // 3: noticecontent
                "'ADDTIME' TEXT," + // 4: addtime
                "'ISTEACHER' TEXT," + // 5: isteacher
                "'ISCONFIRM' TEXT," + // 6: isconfirm
                "'HAVEISCONFIRM' TEXT);"); // 7: haveisconfirm
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTICE_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NoticeEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getNoticekey());
 
        String noticeid = entity.getNoticeid();
        if (noticeid != null) {
            stmt.bindString(2, noticeid);
        }
 
        String noticetitle = entity.getNoticetitle();
        if (noticetitle != null) {
            stmt.bindString(3, noticetitle);
        }
 
        String noticecontent = entity.getNoticecontent();
        if (noticecontent != null) {
            stmt.bindString(4, noticecontent);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(5, addtime);
        }
 
        String isteacher = entity.getIsteacher();
        if (isteacher != null) {
            stmt.bindString(6, isteacher);
        }
 
        String isconfirm = entity.getIsconfirm();
        if (isconfirm != null) {
            stmt.bindString(7, isconfirm);
        }
 
        String haveisconfirm = entity.getHaveisconfirm();
        if (haveisconfirm != null) {
            stmt.bindString(8, haveisconfirm);
        }
    }

    @Override
    protected void attachEntity(NoticeEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NoticeEntity readEntity(Cursor cursor, int offset) {
        NoticeEntity entity = new NoticeEntity( //
            cursor.getString(offset + 0), // noticekey
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // noticeid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // noticetitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // noticecontent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // addtime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // isteacher
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isconfirm
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // haveisconfirm
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NoticeEntity entity, int offset) {
        entity.setNoticekey(cursor.getString(offset + 0));
        entity.setNoticeid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNoticetitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNoticecontent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddtime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsteacher(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsconfirm(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHaveisconfirm(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(NoticeEntity entity, long rowId) {
        return entity.getNoticekey();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(NoticeEntity entity) {
        if(entity != null) {
            return entity.getNoticekey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
