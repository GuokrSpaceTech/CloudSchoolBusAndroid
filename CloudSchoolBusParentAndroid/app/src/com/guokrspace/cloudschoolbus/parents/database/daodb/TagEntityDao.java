package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table TAG_ENTITY.
*/
public class TagEntityDao extends AbstractDao<TagEntity, String> {

    public static final String TABLENAME = "TAG_ENTITY";

    /**
     * Properties of entity TagEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Tagid = new Property(0, String.class, "tagid", true, "TAGID");
        public final static Property TagName = new Property(1, String.class, "tagName", false, "TAG_NAME");
        public final static Property Tagnamedesc = new Property(2, String.class, "tagnamedesc", false, "TAGNAMEDESC");
        public final static Property Tagname_en = new Property(3, String.class, "tagname_en", false, "TAGNAME_EN");
        public final static Property Tagnamedesc_en = new Property(4, String.class, "tagnamedesc_en", false, "TAGNAMEDESC_EN");
    };


    public TagEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TagEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TAG_ENTITY' (" + //
                "'TAGID' TEXT PRIMARY KEY NOT NULL ," + // 0: tagid
                "'TAG_NAME' TEXT," + // 1: tagName
                "'TAGNAMEDESC' TEXT," + // 2: tagnamedesc
                "'TAGNAME_EN' TEXT," + // 3: tagname_en
                "'TAGNAMEDESC_EN' TEXT);"); // 4: tagnamedesc_en
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TAG_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TagEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getTagid());
 
        String tagName = entity.getTagName();
        if (tagName != null) {
            stmt.bindString(2, tagName);
        }
 
        String tagnamedesc = entity.getTagnamedesc();
        if (tagnamedesc != null) {
            stmt.bindString(3, tagnamedesc);
        }
 
        String tagname_en = entity.getTagname_en();
        if (tagname_en != null) {
            stmt.bindString(4, tagname_en);
        }
 
        String tagnamedesc_en = entity.getTagnamedesc_en();
        if (tagnamedesc_en != null) {
            stmt.bindString(5, tagnamedesc_en);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TagEntity readEntity(Cursor cursor, int offset) {
        TagEntity entity = new TagEntity( //
            cursor.getString(offset + 0), // tagid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tagName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tagnamedesc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tagname_en
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // tagnamedesc_en
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TagEntity entity, int offset) {
        entity.setTagid(cursor.getString(offset + 0));
        entity.setTagName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTagnamedesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTagname_en(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTagnamedesc_en(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TagEntity entity, long rowId) {
        return entity.getTagid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TagEntity entity) {
        if(entity != null) {
            return entity.getTagid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
