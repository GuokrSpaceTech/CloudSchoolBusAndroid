package com.guokrspace.cloudschoolbus.parents.database.daodb;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table MESSAGE_ENTITY.
 */
public class MessageEntity {

    /** Not-null value. */
    private String messageid;
    private String title;
    private String description;
    private String isconfirm;
    private String sendtime;
    private String apptype;
    private String studentid;
    private String ismass;
    private String isreaded;
    /** Not-null value. */
    private String senderid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MessageEntityDao myDao;

    private SenderEntity senderEntity;
    private String senderEntity__resolvedKey;

    private List<TagEntity> tagEntityList;
    private List<MessageBodyEntity> messageBodyEntityList;

    public MessageEntity() {
    }

    public MessageEntity(String messageid) {
        this.messageid = messageid;
    }

    public MessageEntity(String messageid, String title, String description, String isconfirm, String sendtime, String apptype, String studentid, String ismass, String isreaded, String senderid) {
        this.messageid = messageid;
        this.title = title;
        this.description = description;
        this.isconfirm = isconfirm;
        this.sendtime = sendtime;
        this.apptype = apptype;
        this.studentid = studentid;
        this.ismass = ismass;
        this.isreaded = isreaded;
        this.senderid = senderid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMessageEntityDao() : null;
    }

    /** Not-null value. */
    public String getMessageid() {
        return messageid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMessageid(String messageid) {
        this.messageid = messageid;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getIsconfirm() {
        return isconfirm;
    }

    public void setIsconfirm(String isconfirm) {
        this.isconfirm = isconfirm;
    }

    public String getSendtime() {
        return sendtime;
    }

    public void setSendtime(String sendtime) {
        this.sendtime = sendtime;
    }

    public String getApptype() {
        return apptype;
    }

    public void setApptype(String apptype) {
        this.apptype = apptype;
    }

    public String getStudentid() {
        return studentid;
    }

    public void setStudentid(String studentid) {
        this.studentid = studentid;
    }

    public String getIsmass() {
        return ismass;
    }

    public void setIsmass(String ismass) {
        this.ismass = ismass;
    }

    public String getIsreaded() {
        return isreaded;
    }

    public void setIsreaded(String isreaded) {
        this.isreaded = isreaded;
    }

    /** Not-null value. */
    public String getSenderid() {
        return senderid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSenderid(String senderid) {
        this.senderid = senderid;
    }

    /** To-one relationship, resolved on first access. */
    public SenderEntity getSenderEntity() {
        String __key = this.senderid;
        if (senderEntity__resolvedKey == null || senderEntity__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SenderEntityDao targetDao = daoSession.getSenderEntityDao();
            SenderEntity senderEntityNew = targetDao.load(__key);
            synchronized (this) {
                senderEntity = senderEntityNew;
            	senderEntity__resolvedKey = __key;
            }
        }
        return senderEntity;
    }

    public void setSenderEntity(SenderEntity senderEntity) {
        if (senderEntity == null) {
            throw new DaoException("To-one property 'senderid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.senderEntity = senderEntity;
            senderid = senderEntity.getId();
            senderEntity__resolvedKey = senderid;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TagEntity> getTagEntityList() {
        if (tagEntityList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TagEntityDao targetDao = daoSession.getTagEntityDao();
            List<TagEntity> tagEntityListNew = targetDao._queryMessageEntity_TagEntityList(messageid);
            synchronized (this) {
                if(tagEntityList == null) {
                    tagEntityList = tagEntityListNew;
                }
            }
        }
        return tagEntityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTagEntityList() {
        tagEntityList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MessageBodyEntity> getMessageBodyEntityList() {
        if (messageBodyEntityList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageBodyEntityDao targetDao = daoSession.getMessageBodyEntityDao();
            List<MessageBodyEntity> messageBodyEntityListNew = targetDao._queryMessageEntity_MessageBodyEntityList(messageid);
            synchronized (this) {
                if(messageBodyEntityList == null) {
                    messageBodyEntityList = messageBodyEntityListNew;
                }
            }
        }
        return messageBodyEntityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMessageBodyEntityList() {
        messageBodyEntityList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
