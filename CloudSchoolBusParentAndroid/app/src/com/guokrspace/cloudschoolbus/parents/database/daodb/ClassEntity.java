package com.guokrspace.cloudschoolbus.parents.database.daodb;

import java.io.Serializable;
import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table CLASS_ENTITY.
 */
public class ClassEntity implements Serializable {

    /** Not-null value. */
    private String classid;
    private String name;
    /** Not-null value. */
    private String schoolid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ClassEntityDao myDao;

    private List<StudentEntity> studentEntityList;
    private List<TeacherEntity> teacherEntityList;

    public ClassEntity() {
    }

    public ClassEntity(String classid) {
        this.classid = classid;
    }

    public ClassEntity(String classid, String name, String schoolid) {
        this.classid = classid;
        this.name = name;
        this.schoolid = schoolid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getClassEntityDao() : null;
    }

    /** Not-null value. */
    public String getClassid() {
        return classid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setClassid(String classid) {
        this.classid = classid;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getSchoolid() {
        return schoolid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSchoolid(String schoolid) {
        this.schoolid = schoolid;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StudentEntity> getStudentEntityList() {
        if (studentEntityList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentEntityDao targetDao = daoSession.getStudentEntityDao();
            List<StudentEntity> studentEntityListNew = targetDao._queryClassEntity_StudentEntityList(classid);
            synchronized (this) {
                if(studentEntityList == null) {
                    studentEntityList = studentEntityListNew;
                }
            }
        }
        return studentEntityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStudentEntityList() {
        studentEntityList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TeacherEntity> getTeacherEntityList() {
        if (teacherEntityList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TeacherEntityDao targetDao = daoSession.getTeacherEntityDao();
            List<TeacherEntity> teacherEntityListNew = targetDao._queryClassEntity_TeacherEntityList(classid);
            synchronized (this) {
                if(teacherEntityList == null) {
                    teacherEntityList = teacherEntityListNew;
                }
            }
        }
        return teacherEntityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTeacherEntityList() {
        teacherEntityList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
