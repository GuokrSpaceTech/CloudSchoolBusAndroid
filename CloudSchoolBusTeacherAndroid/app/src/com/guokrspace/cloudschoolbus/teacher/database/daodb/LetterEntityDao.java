package com.guokrspace.cloudschoolbus.teacher.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table LETTER_ENTITY.
*/
public class LetterEntityDao extends AbstractDao<LetterEntity, Void> {

    public static final String TABLENAME = "LETTER_ENTITY";

    /**
     * Properties of entity LetterEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Letterid = new Property(0, String.class, "letterid", false, "LETTERID");
        public final static Property Letter_type = new Property(1, String.class, "letter_type", false, "LETTER_TYPE");
        public final static Property From_role = new Property(2, String.class, "from_role", false, "FROM_ROLE");
        public final static Property From_id = new Property(3, String.class, "from_id", false, "FROM_ID");
        public final static Property To_role = new Property(4, String.class, "to_role", false, "TO_ROLE");
        public final static Property To_id = new Property(5, String.class, "to_id", false, "TO_ID");
        public final static Property Addtime = new Property(6, String.class, "addtime", false, "ADDTIME");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property IsShowDate = new Property(8, Boolean.class, "isShowDate", false, "IS_SHOW_DATE");
    };


    public LetterEntityDao(DaoConfig config) {
        super(config);
    }
    
    public LetterEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LETTER_ENTITY' (" + //
                "'LETTERID' TEXT," + // 0: letterid
                "'LETTER_TYPE' TEXT," + // 1: letter_type
                "'FROM_ROLE' TEXT," + // 2: from_role
                "'FROM_ID' TEXT," + // 3: from_id
                "'TO_ROLE' TEXT," + // 4: to_role
                "'TO_ID' TEXT," + // 5: to_id
                "'ADDTIME' TEXT," + // 6: addtime
                "'CONTENT' TEXT," + // 7: content
                "'IS_SHOW_DATE' INTEGER);"); // 8: isShowDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LETTER_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LetterEntity entity) {
        stmt.clearBindings();
 
        String letterid = entity.getLetterid();
        if (letterid != null) {
            stmt.bindString(1, letterid);
        }
 
        String letter_type = entity.getLetter_type();
        if (letter_type != null) {
            stmt.bindString(2, letter_type);
        }
 
        String from_role = entity.getFrom_role();
        if (from_role != null) {
            stmt.bindString(3, from_role);
        }
 
        String from_id = entity.getFrom_id();
        if (from_id != null) {
            stmt.bindString(4, from_id);
        }
 
        String to_role = entity.getTo_role();
        if (to_role != null) {
            stmt.bindString(5, to_role);
        }
 
        String to_id = entity.getTo_id();
        if (to_id != null) {
            stmt.bindString(6, to_id);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(7, addtime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        Boolean isShowDate = entity.getIsShowDate();
        if (isShowDate != null) {
            stmt.bindLong(9, isShowDate ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public LetterEntity readEntity(Cursor cursor, int offset) {
        LetterEntity entity = new LetterEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // letterid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // letter_type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // from_role
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // from_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // to_role
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // to_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // addtime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // content
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // isShowDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LetterEntity entity, int offset) {
        entity.setLetterid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLetter_type(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFrom_role(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFrom_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTo_role(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTo_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddtime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsShowDate(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(LetterEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(LetterEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
