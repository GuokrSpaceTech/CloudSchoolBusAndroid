package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table STUDENT_PARENT_RELATION_ENTITY.
*/
public class StudentParentRelationEntityDao extends AbstractDao<StudentParentRelationEntity, Void> {

    public static final String TABLENAME = "STUDENT_PARENT_RELATION_ENTITY";

    /**
     * Properties of entity StudentParentRelationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Studentid = new Property(0, String.class, "studentid", false, "STUDENTID");
        public final static Property Parentid = new Property(1, String.class, "parentid", false, "PARENTID");
    };


    public StudentParentRelationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StudentParentRelationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STUDENT_PARENT_RELATION_ENTITY' (" + //
                "'STUDENTID' TEXT," + // 0: studentid
                "'PARENTID' TEXT);"); // 1: parentid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STUDENT_PARENT_RELATION_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StudentParentRelationEntity entity) {
        stmt.clearBindings();
 
        String studentid = entity.getStudentid();
        if (studentid != null) {
            stmt.bindString(1, studentid);
        }
 
        String parentid = entity.getParentid();
        if (parentid != null) {
            stmt.bindString(2, parentid);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public StudentParentRelationEntity readEntity(Cursor cursor, int offset) {
        StudentParentRelationEntity entity = new StudentParentRelationEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // studentid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // parentid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StudentParentRelationEntity entity, int offset) {
        entity.setStudentid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setParentid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(StudentParentRelationEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(StudentParentRelationEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
