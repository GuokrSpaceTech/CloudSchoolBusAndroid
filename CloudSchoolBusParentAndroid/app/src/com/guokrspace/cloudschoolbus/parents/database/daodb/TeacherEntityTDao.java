package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table TEACHER_ENTITY_T.
*/
public class TeacherEntityTDao extends AbstractDao<TeacherEntityT, String> {

    public static final String TABLENAME = "TEACHER_ENTITY_T";

    /**
     * Properties of entity TeacherEntityT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Teacherid = new Property(0, String.class, "teacherid", true, "TEACHERID");
        public final static Property Duty = new Property(1, String.class, "duty", false, "DUTY");
        public final static Property Avatar = new Property(2, String.class, "avatar", false, "AVATAR");
        public final static Property Realname = new Property(3, String.class, "realname", false, "REALNAME");
        public final static Property Nickname = new Property(4, String.class, "nickname", false, "NICKNAME");
        public final static Property Sex = new Property(5, String.class, "sex", false, "SEX");
        public final static Property Mobile = new Property(6, String.class, "mobile", false, "MOBILE");
        public final static Property Schoolid = new Property(7, String.class, "schoolid", false, "SCHOOLID");
    };

    private DaoSession daoSession;

    private Query<TeacherEntityT> schoolEntityT_TeacherEntityTListQuery;

    public TeacherEntityTDao(DaoConfig config) {
        super(config);
    }
    
    public TeacherEntityTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TEACHER_ENTITY_T' (" + //
                "'TEACHERID' TEXT PRIMARY KEY NOT NULL ," + // 0: teacherid
                "'DUTY' TEXT," + // 1: duty
                "'AVATAR' TEXT," + // 2: avatar
                "'REALNAME' TEXT," + // 3: realname
                "'NICKNAME' TEXT," + // 4: nickname
                "'SEX' TEXT," + // 5: sex
                "'MOBILE' TEXT," + // 6: mobile
                "'SCHOOLID' TEXT NOT NULL );"); // 7: schoolid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEACHER_ENTITY_T'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TeacherEntityT entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getTeacherid());
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(2, duty);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(4, realname);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(7, mobile);
        }
        stmt.bindString(8, entity.getSchoolid());
    }

    @Override
    protected void attachEntity(TeacherEntityT entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TeacherEntityT readEntity(Cursor cursor, int offset) {
        TeacherEntityT entity = new TeacherEntityT( //
            cursor.getString(offset + 0), // teacherid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // duty
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // realname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mobile
            cursor.getString(offset + 7) // schoolid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TeacherEntityT entity, int offset) {
        entity.setTeacherid(cursor.getString(offset + 0));
        entity.setDuty(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRealname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMobile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSchoolid(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TeacherEntityT entity, long rowId) {
        return entity.getTeacherid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TeacherEntityT entity) {
        if(entity != null) {
            return entity.getTeacherid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "teacherEntityTList" to-many relationship of SchoolEntityT. */
    public List<TeacherEntityT> _querySchoolEntityT_TeacherEntityTList(String schoolid) {
        synchronized (this) {
            if (schoolEntityT_TeacherEntityTListQuery == null) {
                QueryBuilder<TeacherEntityT> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Schoolid.eq(null));
                schoolEntityT_TeacherEntityTListQuery = queryBuilder.build();
            }
        }
        Query<TeacherEntityT> query = schoolEntityT_TeacherEntityTListQuery.forCurrentThread();
        query.setParameter(0, schoolid);
        return query.list();
    }

}
