package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table TAG_ENTITY.
*/
public class TagEntityDao extends AbstractDao<TagEntity, String> {

    public static final String TABLENAME = "TAG_ENTITY";

    /**
     * Properties of entity TagEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Tagid = new Property(0, String.class, "tagid", true, "TAGID");
        public final static Property TagName = new Property(1, String.class, "tagName", false, "TAG_NAME");
        public final static Property Tagnamedesc = new Property(2, String.class, "tagnamedesc", false, "TAGNAMEDESC");
        public final static Property Tagname_en = new Property(3, String.class, "tagname_en", false, "TAGNAME_EN");
        public final static Property Tagnamedesc_en = new Property(4, String.class, "tagnamedesc_en", false, "TAGNAMEDESC_EN");
        public final static Property ArticleId = new Property(5, String.class, "articleId", false, "ARTICLE_ID");
    };

    private DaoSession daoSession;

    private Query<TagEntity> articleEntity_TagsQuery;

    public TagEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TagEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TAG_ENTITY' (" + //
                "'TAGID' TEXT PRIMARY KEY NOT NULL ," + // 0: tagid
                "'TAG_NAME' TEXT," + // 1: tagName
                "'TAGNAMEDESC' TEXT," + // 2: tagnamedesc
                "'TAGNAME_EN' TEXT," + // 3: tagname_en
                "'TAGNAMEDESC_EN' TEXT," + // 4: tagnamedesc_en
                "'ARTICLE_ID' TEXT NOT NULL );"); // 5: articleId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TAG_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TagEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getTagid());
 
        String tagName = entity.getTagName();
        if (tagName != null) {
            stmt.bindString(2, tagName);
        }
 
        String tagnamedesc = entity.getTagnamedesc();
        if (tagnamedesc != null) {
            stmt.bindString(3, tagnamedesc);
        }
 
        String tagname_en = entity.getTagname_en();
        if (tagname_en != null) {
            stmt.bindString(4, tagname_en);
        }
 
        String tagnamedesc_en = entity.getTagnamedesc_en();
        if (tagnamedesc_en != null) {
            stmt.bindString(5, tagnamedesc_en);
        }
        stmt.bindString(6, entity.getArticleId());
    }

    @Override
    protected void attachEntity(TagEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TagEntity readEntity(Cursor cursor, int offset) {
        TagEntity entity = new TagEntity( //
            cursor.getString(offset + 0), // tagid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tagName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tagnamedesc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tagname_en
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tagnamedesc_en
            cursor.getString(offset + 5) // articleId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TagEntity entity, int offset) {
        entity.setTagid(cursor.getString(offset + 0));
        entity.setTagName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTagnamedesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTagname_en(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTagnamedesc_en(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setArticleId(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TagEntity entity, long rowId) {
        return entity.getTagid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TagEntity entity) {
        if(entity != null) {
            return entity.getTagid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tags" to-many relationship of ArticleEntity. */
    public List<TagEntity> _queryArticleEntity_Tags(String articleId) {
        synchronized (this) {
            if (articleEntity_TagsQuery == null) {
                QueryBuilder<TagEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ArticleId.eq(null));
                articleEntity_TagsQuery = queryBuilder.build();
            }
        }
        Query<TagEntity> query = articleEntity_TagsQuery.forCurrentThread();
        query.setParameter(0, articleId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getArticleEntityDao().getAllColumns());
            builder.append(" FROM TAG_ENTITY T");
            builder.append(" LEFT JOIN ARTICLE_ENTITY T0 ON T.'ARTICLE_ID'=T0.'ARTICLEKEY'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TagEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        TagEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ArticleEntity articleEntity = loadCurrentOther(daoSession.getArticleEntityDao(), cursor, offset);
         if(articleEntity != null) {
            entity.setArticleEntity(articleEntity);
        }

        return entity;    
    }

    public TagEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TagEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TagEntity> list = new ArrayList<TagEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TagEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TagEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
