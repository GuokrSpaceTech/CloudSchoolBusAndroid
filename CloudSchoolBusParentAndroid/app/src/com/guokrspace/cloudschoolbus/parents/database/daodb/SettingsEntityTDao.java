package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table SETTINGS_ENTITY_T.
*/
public class SettingsEntityTDao extends AbstractDao<SettingsEntityT, String> {

    public static final String TABLENAME = "SETTINGS_ENTITY_T";

    /**
     * Properties of entity SettingsEntityT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Message_type = new Property(1, String.class, "message_type", false, "MESSAGE_TYPE");
        public final static Property Class_module = new Property(2, String.class, "class_module", false, "CLASS_MODULE");
        public final static Property Schoolid = new Property(3, String.class, "schoolid", false, "SCHOOLID");
    };

    private Query<SettingsEntityT> schoolEntityT_SettingsEntityTListQuery;

    public SettingsEntityTDao(DaoConfig config) {
        super(config);
    }
    
    public SettingsEntityTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SETTINGS_ENTITY_T' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'MESSAGE_TYPE' TEXT," + // 1: message_type
                "'CLASS_MODULE' TEXT," + // 2: class_module
                "'SCHOOLID' TEXT NOT NULL );"); // 3: schoolid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SETTINGS_ENTITY_T'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SettingsEntityT entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String message_type = entity.getMessage_type();
        if (message_type != null) {
            stmt.bindString(2, message_type);
        }
 
        String class_module = entity.getClass_module();
        if (class_module != null) {
            stmt.bindString(3, class_module);
        }
        stmt.bindString(4, entity.getSchoolid());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SettingsEntityT readEntity(Cursor cursor, int offset) {
        SettingsEntityT entity = new SettingsEntityT( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // message_type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // class_module
            cursor.getString(offset + 3) // schoolid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SettingsEntityT entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMessage_type(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClass_module(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSchoolid(cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SettingsEntityT entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SettingsEntityT entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "settingsEntityTList" to-many relationship of SchoolEntityT. */
    public List<SettingsEntityT> _querySchoolEntityT_SettingsEntityTList(String id) {
        synchronized (this) {
            if (schoolEntityT_SettingsEntityTListQuery == null) {
                QueryBuilder<SettingsEntityT> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                schoolEntityT_SettingsEntityTListQuery = queryBuilder.build();
            }
        }
        Query<SettingsEntityT> query = schoolEntityT_SettingsEntityTListQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
