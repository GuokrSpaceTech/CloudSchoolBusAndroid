package com.guokrspace.cloudschoolbus.parents.database.daodb;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table IMAGE_ENTITY.
 */
public class ImageEntity {

    /** Not-null value. */
    private String filename;
    private String source;
    private String fext;
    private String size;
    private String isCloud;
    /** Not-null value. */
    private String articleId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ImageEntityDao myDao;

    private ArticleEntity articleEntity;
    private String articleEntity__resolvedKey;


    public ImageEntity() {
    }

    public ImageEntity(String filename) {
        this.filename = filename;
    }

    public ImageEntity(String filename, String source, String fext, String size, String isCloud, String articleId) {
        this.filename = filename;
        this.source = source;
        this.fext = fext;
        this.size = size;
        this.isCloud = isCloud;
        this.articleId = articleId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getImageEntityDao() : null;
    }

    /** Not-null value. */
    public String getFilename() {
        return filename;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFilename(String filename) {
        this.filename = filename;
    }

    public String getSource() {
        return source;
    }

    public void setSource(String source) {
        this.source = source;
    }

    public String getFext() {
        return fext;
    }

    public void setFext(String fext) {
        this.fext = fext;
    }

    public String getSize() {
        return size;
    }

    public void setSize(String size) {
        this.size = size;
    }

    public String getIsCloud() {
        return isCloud;
    }

    public void setIsCloud(String isCloud) {
        this.isCloud = isCloud;
    }

    /** Not-null value. */
    public String getArticleId() {
        return articleId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setArticleId(String articleId) {
        this.articleId = articleId;
    }

    /** To-one relationship, resolved on first access. */
    public ArticleEntity getArticleEntity() {
        String __key = this.articleId;
        if (articleEntity__resolvedKey == null || articleEntity__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArticleEntityDao targetDao = daoSession.getArticleEntityDao();
            ArticleEntity articleEntityNew = targetDao.load(__key);
            synchronized (this) {
                articleEntity = articleEntityNew;
            	articleEntity__resolvedKey = __key;
            }
        }
        return articleEntity;
    }

    public void setArticleEntity(ArticleEntity articleEntity) {
        if (articleEntity == null) {
            throw new DaoException("To-one property 'articleId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.articleEntity = articleEntity;
            articleId = articleEntity.getArticlekey();
            articleEntity__resolvedKey = articleId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
