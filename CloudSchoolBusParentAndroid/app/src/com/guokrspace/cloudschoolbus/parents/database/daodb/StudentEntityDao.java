package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table STUDENT_ENTITY.
*/
public class StudentEntityDao extends AbstractDao<StudentEntity, Void> {

    public static final String TABLENAME = "STUDENT_ENTITY";

    /**
     * Properties of entity StudentEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid_student = new Property(0, String.class, "uid_student", false, "UID_STUDENT");
        public final static Property Uid_class = new Property(1, String.class, "uid_class", false, "UID_CLASS");
        public final static Property Inactive = new Property(2, String.class, "inactive", false, "INACTIVE");
        public final static Property Birthday = new Property(3, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Cnname = new Property(4, String.class, "cnname", false, "CNNAME");
        public final static Property Nikename = new Property(5, String.class, "nikename", false, "NIKENAME");
        public final static Property Sex = new Property(6, String.class, "sex", false, "SEX");
        public final static Property Classname = new Property(7, String.class, "classname", false, "CLASSNAME");
        public final static Property Schoolid = new Property(8, String.class, "schoolid", false, "SCHOOLID");
    };


    public StudentEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StudentEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STUDENT_ENTITY' (" + //
                "'UID_STUDENT' TEXT NOT NULL ," + // 0: uid_student
                "'UID_CLASS' TEXT," + // 1: uid_class
                "'INACTIVE' TEXT," + // 2: inactive
                "'BIRTHDAY' TEXT," + // 3: birthday
                "'CNNAME' TEXT," + // 4: cnname
                "'NIKENAME' TEXT," + // 5: nikename
                "'SEX' TEXT," + // 6: sex
                "'CLASSNAME' TEXT," + // 7: classname
                "'SCHOOLID' TEXT);"); // 8: schoolid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STUDENT_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StudentEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUid_student());
 
        String uid_class = entity.getUid_class();
        if (uid_class != null) {
            stmt.bindString(2, uid_class);
        }
 
        String inactive = entity.getInactive();
        if (inactive != null) {
            stmt.bindString(3, inactive);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(4, birthday);
        }
 
        String cnname = entity.getCnname();
        if (cnname != null) {
            stmt.bindString(5, cnname);
        }
 
        String nikename = entity.getNikename();
        if (nikename != null) {
            stmt.bindString(6, nikename);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(8, classname);
        }
 
        String schoolid = entity.getSchoolid();
        if (schoolid != null) {
            stmt.bindString(9, schoolid);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public StudentEntity readEntity(Cursor cursor, int offset) {
        StudentEntity entity = new StudentEntity( //
            cursor.getString(offset + 0), // uid_student
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid_class
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // inactive
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // birthday
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cnname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nikename
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // classname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // schoolid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StudentEntity entity, int offset) {
        entity.setUid_student(cursor.getString(offset + 0));
        entity.setUid_class(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInactive(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBirthday(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCnname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNikename(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClassname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSchoolid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(StudentEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(StudentEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
