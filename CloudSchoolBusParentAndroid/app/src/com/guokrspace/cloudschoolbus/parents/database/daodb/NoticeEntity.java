package com.guokrspace.cloudschoolbus.parents.database.daodb;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table NOTICE_ENTITY.
 */
public class NoticeEntity {

    /** Not-null value. */
    private String noticekey;
    private String noticeid;
    private String noticetitle;
    private String noticecontent;
    private String addtime;
    private String isteacher;
    private String isconfirm;
    private String haveisconfirm;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NoticeEntityDao myDao;

    private List<NoticeImageEntity> noticeImages;

    public NoticeEntity() {
    }

    public NoticeEntity(String noticekey) {
        this.noticekey = noticekey;
    }

    public NoticeEntity(String noticekey, String noticeid, String noticetitle, String noticecontent, String addtime, String isteacher, String isconfirm, String haveisconfirm) {
        this.noticekey = noticekey;
        this.noticeid = noticeid;
        this.noticetitle = noticetitle;
        this.noticecontent = noticecontent;
        this.addtime = addtime;
        this.isteacher = isteacher;
        this.isconfirm = isconfirm;
        this.haveisconfirm = haveisconfirm;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNoticeEntityDao() : null;
    }

    /** Not-null value. */
    public String getNoticekey() {
        return noticekey;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNoticekey(String noticekey) {
        this.noticekey = noticekey;
    }

    public String getNoticeid() {
        return noticeid;
    }

    public void setNoticeid(String noticeid) {
        this.noticeid = noticeid;
    }

    public String getNoticetitle() {
        return noticetitle;
    }

    public void setNoticetitle(String noticetitle) {
        this.noticetitle = noticetitle;
    }

    public String getNoticecontent() {
        return noticecontent;
    }

    public void setNoticecontent(String noticecontent) {
        this.noticecontent = noticecontent;
    }

    public String getAddtime() {
        return addtime;
    }

    public void setAddtime(String addtime) {
        this.addtime = addtime;
    }

    public String getIsteacher() {
        return isteacher;
    }

    public void setIsteacher(String isteacher) {
        this.isteacher = isteacher;
    }

    public String getIsconfirm() {
        return isconfirm;
    }

    public void setIsconfirm(String isconfirm) {
        this.isconfirm = isconfirm;
    }

    public String getHaveisconfirm() {
        return haveisconfirm;
    }

    public void setHaveisconfirm(String haveisconfirm) {
        this.haveisconfirm = haveisconfirm;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<NoticeImageEntity> getNoticeImages() {
        if (noticeImages == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NoticeImageEntityDao targetDao = daoSession.getNoticeImageEntityDao();
            List<NoticeImageEntity> noticeImagesNew = targetDao._queryNoticeEntity_NoticeImages(noticekey);
            synchronized (this) {
                if(noticeImages == null) {
                    noticeImages = noticeImagesNew;
                }
            }
        }
        return noticeImages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNoticeImages() {
        noticeImages = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
