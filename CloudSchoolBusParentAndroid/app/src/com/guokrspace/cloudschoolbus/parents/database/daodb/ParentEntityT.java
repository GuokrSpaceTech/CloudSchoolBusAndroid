package com.guokrspace.cloudschoolbus.parents.database.daodb;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table PARENT_ENTITY_T.
 */
public class ParentEntityT {

    /** Not-null value. */
    private String parentid;
    private String nikename;
    private String relationship;
    private String mobile;
    private String avatar;
    /** Not-null value. */
    private String studentid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ParentEntityTDao myDao;

    private List<StudentEntityT> studentEntityTList;

    public ParentEntityT() {
    }

    public ParentEntityT(String parentid) {
        this.parentid = parentid;
    }

    public ParentEntityT(String parentid, String nikename, String relationship, String mobile, String avatar, String studentid) {
        this.parentid = parentid;
        this.nikename = nikename;
        this.relationship = relationship;
        this.mobile = mobile;
        this.avatar = avatar;
        this.studentid = studentid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getParentEntityTDao() : null;
    }

    /** Not-null value. */
    public String getParentid() {
        return parentid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setParentid(String parentid) {
        this.parentid = parentid;
    }

    public String getNikename() {
        return nikename;
    }

    public void setNikename(String nikename) {
        this.nikename = nikename;
    }

    public String getRelationship() {
        return relationship;
    }

    public void setRelationship(String relationship) {
        this.relationship = relationship;
    }

    public String getMobile() {
        return mobile;
    }

    public void setMobile(String mobile) {
        this.mobile = mobile;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    /** Not-null value. */
    public String getStudentid() {
        return studentid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStudentid(String studentid) {
        this.studentid = studentid;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StudentEntityT> getStudentEntityTList() {
        if (studentEntityTList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StudentEntityTDao targetDao = daoSession.getStudentEntityTDao();
            List<StudentEntityT> studentEntityTListNew = targetDao._queryParentEntityT_StudentEntityTList(parentid);
            synchronized (this) {
                if(studentEntityTList == null) {
                    studentEntityTList = studentEntityTListNew;
                }
            }
        }
        return studentEntityTList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStudentEntityTList() {
        studentEntityTList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
