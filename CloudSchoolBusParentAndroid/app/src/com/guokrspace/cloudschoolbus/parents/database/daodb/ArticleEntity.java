package com.guokrspace.cloudschoolbus.parents.database.daodb;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table ARTICLE_ENTITY.
 */
public class ArticleEntity {

    /** Not-null value. */
    private String articlekey;
    private String tag;
    private String articleid;
    private String title;
    private String content;
    private String publishtime;
    private String addtime;
    private String upnum;
    private String commentnum;
    private String havezan;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ArticleEntityDao myDao;

    private List<ImageEntity> images;
    private List<TagEntity> tags;

    public ArticleEntity() {
    }

    public ArticleEntity(String articlekey) {
        this.articlekey = articlekey;
    }

    public ArticleEntity(String articlekey, String tag, String articleid, String title, String content, String publishtime, String addtime, String upnum, String commentnum, String havezan) {
        this.articlekey = articlekey;
        this.tag = tag;
        this.articleid = articleid;
        this.title = title;
        this.content = content;
        this.publishtime = publishtime;
        this.addtime = addtime;
        this.upnum = upnum;
        this.commentnum = commentnum;
        this.havezan = havezan;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getArticleEntityDao() : null;
    }

    /** Not-null value. */
    public String getArticlekey() {
        return articlekey;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setArticlekey(String articlekey) {
        this.articlekey = articlekey;
    }

    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public String getArticleid() {
        return articleid;
    }

    public void setArticleid(String articleid) {
        this.articleid = articleid;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getPublishtime() {
        return publishtime;
    }

    public void setPublishtime(String publishtime) {
        this.publishtime = publishtime;
    }

    public String getAddtime() {
        return addtime;
    }

    public void setAddtime(String addtime) {
        this.addtime = addtime;
    }

    public String getUpnum() {
        return upnum;
    }

    public void setUpnum(String upnum) {
        this.upnum = upnum;
    }

    public String getCommentnum() {
        return commentnum;
    }

    public void setCommentnum(String commentnum) {
        this.commentnum = commentnum;
    }

    public String getHavezan() {
        return havezan;
    }

    public void setHavezan(String havezan) {
        this.havezan = havezan;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ImageEntity> getImages() {
        if (images == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImageEntityDao targetDao = daoSession.getImageEntityDao();
            List<ImageEntity> imagesNew = targetDao._queryArticleEntity_Images(articlekey);
            synchronized (this) {
                if(images == null) {
                    images = imagesNew;
                }
            }
        }
        return images;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetImages() {
        images = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TagEntity> getTags() {
        if (tags == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TagEntityDao targetDao = daoSession.getTagEntityDao();
            List<TagEntity> tagsNew = targetDao._queryArticleEntity_Tags(articlekey);
            synchronized (this) {
                if(tags == null) {
                    tags = tagsNew;
                }
            }
        }
        return tags;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTags() {
        tags = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
