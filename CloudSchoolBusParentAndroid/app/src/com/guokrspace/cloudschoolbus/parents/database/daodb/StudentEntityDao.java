package com.guokrspace.cloudschoolbus.parents.database.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table STUDENT_ENTITY.
*/
public class StudentEntityDao extends AbstractDao<StudentEntity, String> {

    public static final String TABLENAME = "STUDENT_ENTITY";

    /**
     * Properties of entity StudentEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cnname = new Property(0, String.class, "cnname", false, "CNNAME");
        public final static Property Birthday = new Property(1, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property Nikename = new Property(4, String.class, "nikename", false, "NIKENAME");
        public final static Property Studentid = new Property(5, String.class, "studentid", true, "STUDENTID");
        public final static Property Classid = new Property(6, String.class, "classid", false, "CLASSID");
    };

    private DaoSession daoSession;

    private Query<StudentEntity> classEntity_StudentEntityListQuery;

    public StudentEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StudentEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STUDENT_ENTITY' (" + //
                "'CNNAME' TEXT," + // 0: cnname
                "'BIRTHDAY' TEXT," + // 1: birthday
                "'SEX' TEXT," + // 2: sex
                "'AVATAR' TEXT," + // 3: avatar
                "'NIKENAME' TEXT," + // 4: nikename
                "'STUDENTID' TEXT PRIMARY KEY NOT NULL ," + // 5: studentid
                "'CLASSID' TEXT NOT NULL );"); // 6: classid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STUDENT_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StudentEntity entity) {
        stmt.clearBindings();
 
        String cnname = entity.getCnname();
        if (cnname != null) {
            stmt.bindString(1, cnname);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(2, birthday);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String nikename = entity.getNikename();
        if (nikename != null) {
            stmt.bindString(5, nikename);
        }
        stmt.bindString(6, entity.getStudentid());
        stmt.bindString(7, entity.getClassid());
    }

    @Override
    protected void attachEntity(StudentEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 5);
    }    

    /** @inheritdoc */
    @Override
    public StudentEntity readEntity(Cursor cursor, int offset) {
        StudentEntity entity = new StudentEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cnname
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // birthday
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nikename
            cursor.getString(offset + 5), // studentid
            cursor.getString(offset + 6) // classid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StudentEntity entity, int offset) {
        entity.setCnname(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBirthday(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNikename(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStudentid(cursor.getString(offset + 5));
        entity.setClassid(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(StudentEntity entity, long rowId) {
        return entity.getStudentid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(StudentEntity entity) {
        if(entity != null) {
            return entity.getStudentid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "studentEntityList" to-many relationship of ClassEntity. */
    public List<StudentEntity> _queryClassEntity_StudentEntityList(String classid) {
        synchronized (this) {
            if (classEntity_StudentEntityListQuery == null) {
                QueryBuilder<StudentEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Classid.eq(null));
                classEntity_StudentEntityListQuery = queryBuilder.build();
            }
        }
        Query<StudentEntity> query = classEntity_StudentEntityListQuery.forCurrentThread();
        query.setParameter(0, classid);
        return query.list();
    }

}
